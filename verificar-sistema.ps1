# üîç Script de Verificaci√≥n del Sistema - Automatizaci√≥n DTE
# Verificar que todo est√© configurado correctamente

Write-Host "üîç Verificando configuraci√≥n del sistema..." -ForegroundColor Blue
Write-Host "üë®‚Äçüíª Autor: Juan Francisco Candia - Baplica S.A.`n" -ForegroundColor Cyan

$errores = @()
$warnings = @()

# Verificar Node.js
Write-Host "üìã Verificando Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "  ‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    $errores += "‚ùå Node.js no encontrado"
}

# Verificar npm
try {
    $npmVersion = npm --version
    Write-Host "  ‚úÖ npm: $npmVersion" -ForegroundColor Green
} catch {
    $errores += "‚ùå npm no encontrado"
}

# Verificar archivos clave
Write-Host "`nüìã Verificando archivos del proyecto..." -ForegroundColor Yellow
$archivosRequeridos = @(
    "package.json",
    "playwright.config.js", 
    "tests/login-simple.spec.js",
    "README.md",
    ".env.example"
)

foreach ($archivo in $archivosRequeridos) {
    if (Test-Path $archivo) {
        Write-Host "  ‚úÖ $archivo" -ForegroundColor Green
    } else {
        $errores += "‚ùå Archivo faltante: $archivo"
    }
}

# Verificar node_modules
Write-Host "`nüìã Verificando dependencias..." -ForegroundColor Yellow
if (Test-Path "node_modules") {
    Write-Host "  ‚úÖ node_modules existe" -ForegroundColor Green
    
    # Verificar Playwright espec√≠ficamente
    if (Test-Path "node_modules/@playwright") {
        Write-Host "  ‚úÖ Playwright instalado" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  Playwright podr√≠a no estar instalado correctamente"
    }
} else {
    $errores += "‚ùå node_modules no encontrado - ejecuta 'npm install'"
}

# Verificar variables de entorno
Write-Host "`nüìã Verificando configuraci√≥n..." -ForegroundColor Yellow
if (Test-Path ".env.local") {
    Write-Host "  ‚úÖ .env.local existe" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  .env.local no existe - se usar√°n valores por defecto"
}

# Verificar Git
Write-Host "`nüìã Verificando Git..." -ForegroundColor Yellow
try {
    $gitVersion = git --version
    Write-Host "  ‚úÖ Git: $gitVersion" -ForegroundColor Green
    
    # Verificar si estamos en un repo Git
    if (Test-Path ".git") {
        $gitRemote = git remote get-url origin 2>$null
        if ($gitRemote) {
            Write-Host "  ‚úÖ Repositorio Git configurado: $gitRemote" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è  No hay remote configurado"
        }
    } else {
        $warnings += "‚ö†Ô∏è  No es un repositorio Git"
    }
} catch {
    $warnings += "‚ö†Ô∏è  Git no encontrado"
}

# Verificar PowerShell version
Write-Host "`nüìã Verificando PowerShell..." -ForegroundColor Yellow
$psVersion = $PSVersionTable.PSVersion
Write-Host "  ‚úÖ PowerShell: $psVersion" -ForegroundColor Green

# Verificar scripts de ejecuci√≥n
Write-Host "`nüìã Verificando scripts..." -ForegroundColor Yellow
$scripts = @(
    "ejecutar-test-mejorado.ps1",
    "setup-completo.ps1",
    "run-test.ps1"
)

foreach ($script in $scripts) {
    if (Test-Path $script) {
        Write-Host "  ‚úÖ $script" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  Script faltante: $script"
    }
}

# Verificar espacio en disco
Write-Host "`nüìã Verificando recursos del sistema..." -ForegroundColor Yellow
$drive = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
$freeSpaceGB = [math]::Round($drive.FreeSpace / 1GB, 2)
Write-Host "  ‚úÖ Espacio libre en C: $freeSpaceGB GB" -ForegroundColor Green

if ($freeSpaceGB -lt 1) {
    $warnings += "‚ö†Ô∏è  Poco espacio en disco (menos de 1GB libre)"
}

# Mostrar resumen
Write-Host "`n" + "="*60 -ForegroundColor White
Write-Host "üìä RESUMEN DE VERIFICACI√ìN" -ForegroundColor White
Write-Host "="*60 -ForegroundColor White

if ($errores.Count -eq 0) {
    Write-Host "üéâ CONFIGURACI√ìN COMPLETA" -ForegroundColor Green
    Write-Host "‚úÖ Todos los componentes cr√≠ticos est√°n presentes" -ForegroundColor Green
} else {
    Write-Host "‚ùå ERRORES ENCONTRADOS ($($errores.Count))" -ForegroundColor Red
    foreach ($error in $errores) {
        Write-Host "   $error" -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è  ADVERTENCIAS ($($warnings.Count))" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "   $warning" -ForegroundColor Yellow
    }
}

Write-Host "`nüìã COMANDOS RECOMENDADOS:" -ForegroundColor Cyan
if ($errores.Count -eq 0) {
    Write-Host "   npm test                    # Ejecutar tests" -ForegroundColor White
    Write-Host "   .\ejecutar-test-mejorado.ps1   # Test completo" -ForegroundColor White
    Write-Host "   npm run test:ui             # Interfaz visual" -ForegroundColor White
} else {
    Write-Host "   .\setup-completo.ps1        # Configurar proyecto" -ForegroundColor White
    Write-Host "   npm install                 # Instalar dependencias" -ForegroundColor White
}

Write-Host "`nüìû SOPORTE:" -ForegroundColor Cyan
Write-Host "   üìß juan.candia@baplica.cl" -ForegroundColor White
Write-Host "   üêõ https://github.com/JFCandia/Automatizacion-DTE/issues" -ForegroundColor White

if ($errores.Count -eq 0) {
    Write-Host "`nüöÄ ¬°Sistema listo para usar!" -ForegroundColor Green
} else {
    Write-Host "`nüîß Soluciona los errores antes de continuar" -ForegroundColor Yellow
}

pause
